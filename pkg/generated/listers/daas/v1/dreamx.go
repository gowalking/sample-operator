/*
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2018 Dreamxos. All Rights Reserved.
 * 2018-10-08  @author gaozh
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "sample-operator/pkg/apis/daas/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DreamxLister helps list Dreamxes.
type DreamxLister interface {
	// List lists all Dreamxes in the indexer.
	List(selector labels.Selector) (ret []*v1.Dreamx, err error)
	// Dreamxes returns an object that can list and get Dreamxes.
	Dreamxes(namespace string) DreamxNamespaceLister
	DreamxListerExpansion
}

// dreamxLister implements the DreamxLister interface.
type dreamxLister struct {
	indexer cache.Indexer
}

// NewDreamxLister returns a new DreamxLister.
func NewDreamxLister(indexer cache.Indexer) DreamxLister {
	return &dreamxLister{indexer: indexer}
}

// List lists all Dreamxes in the indexer.
func (s *dreamxLister) List(selector labels.Selector) (ret []*v1.Dreamx, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Dreamx))
	})
	return ret, err
}

// Dreamxes returns an object that can list and get Dreamxes.
func (s *dreamxLister) Dreamxes(namespace string) DreamxNamespaceLister {
	return dreamxNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DreamxNamespaceLister helps list and get Dreamxes.
type DreamxNamespaceLister interface {
	// List lists all Dreamxes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Dreamx, err error)
	// Get retrieves the Dreamx from the indexer for a given namespace and name.
	Get(name string) (*v1.Dreamx, error)
	DreamxNamespaceListerExpansion
}

// dreamxNamespaceLister implements the DreamxNamespaceLister
// interface.
type dreamxNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Dreamxes in the indexer for a given namespace.
func (s dreamxNamespaceLister) List(selector labels.Selector) (ret []*v1.Dreamx, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Dreamx))
	})
	return ret, err
}

// Get retrieves the Dreamx from the indexer for a given namespace and name.
func (s dreamxNamespaceLister) Get(name string) (*v1.Dreamx, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("dreamx"), name)
	}
	return obj.(*v1.Dreamx), nil
}
