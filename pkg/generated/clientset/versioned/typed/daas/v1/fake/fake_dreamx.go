/*
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2018 Dreamxos. All Rights Reserved.
 * 2018-10-08  @author gaozh
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	daas_v1 "sample-operator/pkg/apis/daas/v1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDreamxes implements DreamxInterface
type FakeDreamxes struct {
	Fake *FakeDaasV1
	ns   string
}

var dreamxesResource = schema.GroupVersionResource{Group: "daas.dreamxos.com", Version: "v1", Resource: "dreamxes"}

var dreamxesKind = schema.GroupVersionKind{Group: "daas.dreamxos.com", Version: "v1", Kind: "Dreamx"}

// Get takes name of the dreamx, and returns the corresponding dreamx object, and an error if there is any.
func (c *FakeDreamxes) Get(name string, options v1.GetOptions) (result *daas_v1.Dreamx, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(dreamxesResource, c.ns, name), &daas_v1.Dreamx{})

	if obj == nil {
		return nil, err
	}
	return obj.(*daas_v1.Dreamx), err
}

// List takes label and field selectors, and returns the list of Dreamxes that match those selectors.
func (c *FakeDreamxes) List(opts v1.ListOptions) (result *daas_v1.DreamxList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(dreamxesResource, dreamxesKind, c.ns, opts), &daas_v1.DreamxList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &daas_v1.DreamxList{}
	for _, item := range obj.(*daas_v1.DreamxList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested dreamxes.
func (c *FakeDreamxes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(dreamxesResource, c.ns, opts))

}

// Create takes the representation of a dreamx and creates it.  Returns the server's representation of the dreamx, and an error, if there is any.
func (c *FakeDreamxes) Create(dreamx *daas_v1.Dreamx) (result *daas_v1.Dreamx, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(dreamxesResource, c.ns, dreamx), &daas_v1.Dreamx{})

	if obj == nil {
		return nil, err
	}
	return obj.(*daas_v1.Dreamx), err
}

// Update takes the representation of a dreamx and updates it. Returns the server's representation of the dreamx, and an error, if there is any.
func (c *FakeDreamxes) Update(dreamx *daas_v1.Dreamx) (result *daas_v1.Dreamx, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(dreamxesResource, c.ns, dreamx), &daas_v1.Dreamx{})

	if obj == nil {
		return nil, err
	}
	return obj.(*daas_v1.Dreamx), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDreamxes) UpdateStatus(dreamx *daas_v1.Dreamx) (*daas_v1.Dreamx, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(dreamxesResource, "status", c.ns, dreamx), &daas_v1.Dreamx{})

	if obj == nil {
		return nil, err
	}
	return obj.(*daas_v1.Dreamx), err
}

// Delete takes name of the dreamx and deletes it. Returns an error if one occurs.
func (c *FakeDreamxes) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(dreamxesResource, c.ns, name), &daas_v1.Dreamx{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDreamxes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(dreamxesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &daas_v1.DreamxList{})
	return err
}

// Patch applies the patch and returns the patched dreamx.
func (c *FakeDreamxes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *daas_v1.Dreamx, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(dreamxesResource, c.ns, name, data, subresources...), &daas_v1.Dreamx{})

	if obj == nil {
		return nil, err
	}
	return obj.(*daas_v1.Dreamx), err
}
