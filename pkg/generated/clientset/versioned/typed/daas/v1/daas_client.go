/*
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2018 Dreamxos. All Rights Reserved.
 * 2018-10-08  @author gaozh
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "sample-operator/pkg/apis/daas/v1"
	"sample-operator/pkg/generated/clientset/versioned/scheme"

	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	rest "k8s.io/client-go/rest"
)

type DaasV1Interface interface {
	RESTClient() rest.Interface
	DreamxesGetter
}

// DaasV1Client is used to interact with features provided by the daas.dreamxos.com group.
type DaasV1Client struct {
	restClient rest.Interface
}

func (c *DaasV1Client) Dreamxes(namespace string) DreamxInterface {
	return newDreamxes(c, namespace)
}

// NewForConfig creates a new DaasV1Client for the given config.
func NewForConfig(c *rest.Config) (*DaasV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &DaasV1Client{client}, nil
}

// NewForConfigOrDie creates a new DaasV1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *DaasV1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new DaasV1Client for the given RESTClient.
func New(c rest.Interface) *DaasV1Client {
	return &DaasV1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *DaasV1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
