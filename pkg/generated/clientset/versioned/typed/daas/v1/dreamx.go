/*
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2018 Dreamxos. All Rights Reserved.
 * 2018-10-08  @author gaozh
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "sample-operator/pkg/apis/daas/v1"
	scheme "sample-operator/pkg/generated/clientset/versioned/scheme"

	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// DreamxesGetter has a method to return a DreamxInterface.
// A group's client should implement this interface.
type DreamxesGetter interface {
	Dreamxes(namespace string) DreamxInterface
}

// DreamxInterface has methods to work with Dreamx resources.
type DreamxInterface interface {
	Create(*v1.Dreamx) (*v1.Dreamx, error)
	Update(*v1.Dreamx) (*v1.Dreamx, error)
	UpdateStatus(*v1.Dreamx) (*v1.Dreamx, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.Dreamx, error)
	List(opts meta_v1.ListOptions) (*v1.DreamxList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Dreamx, err error)
	DreamxExpansion
}

// dreamxes implements DreamxInterface
type dreamxes struct {
	client rest.Interface
	ns     string
}

// newDreamxes returns a Dreamxes
func newDreamxes(c *DaasV1Client, namespace string) *dreamxes {
	return &dreamxes{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the dreamx, and returns the corresponding dreamx object, and an error if there is any.
func (c *dreamxes) Get(name string, options meta_v1.GetOptions) (result *v1.Dreamx, err error) {
	result = &v1.Dreamx{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("dreamxes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Dreamxes that match those selectors.
func (c *dreamxes) List(opts meta_v1.ListOptions) (result *v1.DreamxList, err error) {
	result = &v1.DreamxList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("dreamxes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested dreamxes.
func (c *dreamxes) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("dreamxes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a dreamx and creates it.  Returns the server's representation of the dreamx, and an error, if there is any.
func (c *dreamxes) Create(dreamx *v1.Dreamx) (result *v1.Dreamx, err error) {
	result = &v1.Dreamx{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("dreamxes").
		Body(dreamx).
		Do().
		Into(result)
	return
}

// Update takes the representation of a dreamx and updates it. Returns the server's representation of the dreamx, and an error, if there is any.
func (c *dreamxes) Update(dreamx *v1.Dreamx) (result *v1.Dreamx, err error) {
	result = &v1.Dreamx{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("dreamxes").
		Name(dreamx.Name).
		Body(dreamx).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *dreamxes) UpdateStatus(dreamx *v1.Dreamx) (result *v1.Dreamx, err error) {
	result = &v1.Dreamx{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("dreamxes").
		Name(dreamx.Name).
		SubResource("status").
		Body(dreamx).
		Do().
		Into(result)
	return
}

// Delete takes name of the dreamx and deletes it. Returns an error if one occurs.
func (c *dreamxes) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("dreamxes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *dreamxes) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("dreamxes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched dreamx.
func (c *dreamxes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Dreamx, err error) {
	result = &v1.Dreamx{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("dreamxes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
