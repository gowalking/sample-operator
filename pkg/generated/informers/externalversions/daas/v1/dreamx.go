/*
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2018 Dreamxos. All Rights Reserved.
 * 2018-10-08  @author gaozh
 */

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	daas_v1 "sample-operator/pkg/apis/daas/v1"
	versioned "sample-operator/pkg/generated/clientset/versioned"
	internalinterfaces "sample-operator/pkg/generated/informers/externalversions/internalinterfaces"
	v1 "sample-operator/pkg/generated/listers/daas/v1"
	time "time"

	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// DreamxInformer provides access to a shared informer and lister for
// Dreamxes.
type DreamxInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.DreamxLister
}

type dreamxInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewDreamxInformer constructs a new informer for Dreamx type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDreamxInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredDreamxInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredDreamxInformer constructs a new informer for Dreamx type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDreamxInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DaasV1().Dreamxes(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DaasV1().Dreamxes(namespace).Watch(options)
			},
		},
		&daas_v1.Dreamx{},
		resyncPeriod,
		indexers,
	)
}

func (f *dreamxInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredDreamxInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *dreamxInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&daas_v1.Dreamx{}, f.defaultInformer)
}

func (f *dreamxInformer) Lister() v1.DreamxLister {
	return v1.NewDreamxLister(f.Informer().GetIndexer())
}
